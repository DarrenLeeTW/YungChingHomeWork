// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace YungChingHomeWork.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "house_listing")]
    public partial class 房屋列表管理Feature : object, Xunit.IClassFixture<房屋列表管理Feature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "house_listing"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("zh-TW"), "Features", "房屋列表管理", "  為了跟蹤可用的房產信息\r\n  作為房地產經紀人\r\n  我想要管理房屋列表", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "房屋列表管理.feature"
#line hidden
        
        public 房屋列表管理Feature(房屋列表管理Feature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="新增房屋列表")]
        [Xunit.TraitAttribute("FeatureTitle", "房屋列表管理")]
        [Xunit.TraitAttribute("Description", "新增房屋列表")]
        public async global::System.Threading.Tasks.Task 新增房屋列表()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新增房屋列表", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "名稱",
                            "地址",
                            "價格"});
                table1.AddRow(new string[] {
                            "現代公寓",
                            "台北市信義區101號",
                            "1000000"});
#line 10
    await testRunner.GivenAsync("我有以下房屋資訊", ((string)(null)), table1, "假設");
#line hidden
#line 13
    await testRunner.WhenAsync("我建立新的房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "當");
#line hidden
#line 14
    await testRunner.ThenAsync("系統應該成功保存房屋資訊", ((string)(null)), ((global::Reqnroll.Table)(null)), "那麼");
#line hidden
#line 15
    await testRunner.AndAsync("我應該收到包含ID的房屋資訊", ((string)(null)), ((global::Reqnroll.Table)(null)), "而且");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="查詢現有房屋列表")]
        [Xunit.TraitAttribute("FeatureTitle", "房屋列表管理")]
        [Xunit.TraitAttribute("Description", "查詢現有房屋列表")]
        public async global::System.Threading.Tasks.Task 查詢現有房屋列表()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("查詢現有房屋列表", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
    await testRunner.GivenAsync("系統中存在ID為1的房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "假設");
#line hidden
#line 19
    await testRunner.WhenAsync("我查詢該房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "當");
#line hidden
#line 20
    await testRunner.ThenAsync("我應該收到房屋的詳細資訊", ((string)(null)), ((global::Reqnroll.Table)(null)), "那麼");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "名稱",
                            "地址",
                            "價格"});
                table2.AddRow(new string[] {
                            "現代公寓",
                            "台北市信義區101號",
                            "1000000"});
#line 21
    await testRunner.AndAsync("房屋資訊應該包含以下內容", ((string)(null)), table2, "而且");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="更新房屋列表")]
        [Xunit.TraitAttribute("FeatureTitle", "房屋列表管理")]
        [Xunit.TraitAttribute("Description", "更新房屋列表")]
        public async global::System.Threading.Tasks.Task 更新房屋列表()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("更新房屋列表", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
    await testRunner.GivenAsync("系統中存在ID為1的房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "假設");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "名稱",
                            "地址",
                            "價格"});
                table3.AddRow(new string[] {
                            "豪華公寓",
                            "台北市大安區敦化南路",
                            "1200000"});
#line 27
    await testRunner.WhenAsync("我更新以下房屋資訊", ((string)(null)), table3, "當");
#line hidden
#line 30
    await testRunner.ThenAsync("系統應該成功更新房屋資訊", ((string)(null)), ((global::Reqnroll.Table)(null)), "那麼");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="刪除房屋列表")]
        [Xunit.TraitAttribute("FeatureTitle", "房屋列表管理")]
        [Xunit.TraitAttribute("Description", "刪除房屋列表")]
        public async global::System.Threading.Tasks.Task 刪除房屋列表()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("刪除房屋列表", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
    await testRunner.GivenAsync("系統中存在ID為1的房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "假設");
#line hidden
#line 34
    await testRunner.WhenAsync("我刪除該房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "當");
#line hidden
#line 35
    await testRunner.ThenAsync("系統應該成功刪除該房屋資訊", ((string)(null)), ((global::Reqnroll.Table)(null)), "那麼");
#line hidden
#line 36
    await testRunner.AndAsync("我應該無法查詢到該房屋列表", ((string)(null)), ((global::Reqnroll.Table)(null)), "而且");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await 房屋列表管理Feature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await 房屋列表管理Feature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
